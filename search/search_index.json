{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pydi-client","text":"<p>A simple Python SDK for Data Intelligence solution.</p> <ul> <li>\ud83d\udca1 Easy to integrate</li> <li>\ud83d\ude80 Production-ready</li> <li>\ud83d\udce6 Lightweight</li> </ul> <p>Concepts</p> <p>Get Started</p> <p>Tutorial</p> <p>API Reference</p>"},{"location":"concepts/","title":"Data Intelligence Concepts","text":""},{"location":"concepts/#collections","title":"Collections","text":"<p>Logical domain for identifying a set of object metadata that is extracted and queried. Each Collection consists of the following:</p> <ul> <li>One or more Buckets associated with the Collection</li> <li>One Pipeline</li> </ul> <p>A Search query is executed against a Collection. The result from the Query will be based on search performed over all object metadata present within that Collection.</p>"},{"location":"concepts/#pipelines","title":"Pipelines","text":"<p>Representation of the processing required to extract metadata for Data Intelligence. Each Pipeline consists of the following:</p> <ul> <li> <p>One or more Event Filters that trigger the pipeline. A common use case for an event filter is to indicate the suffix for triggering extraction (e.g. \"*.pdf\" filter to trigger extraction from PDF files)</p> </li> <li> <p>One of either:</p> <ul> <li>Model that identifies the embedding model to use for the Pipeline, or,</li> <li>Custom Function (custom function is not supported currently. However the API requires a dummy custom function string as input. Ex - \"custom_processing_function\")</li> </ul> </li> <li> <p>One Schema describing the logical structure of the metadata to be extracted.</p> </li> </ul>"},{"location":"concepts/#embedding-models","title":"Embedding Models","text":"<p>ML model used to extract embeddings from the object data. A Model may be associated with a Pipeline Instance. This association is created when the Pipeline is instantiated, and cannot be modified for the lifetime of the Pipeline. The embeddings generated from a Model are persisted within the Collection corresponding to the Pipeline.</p>"},{"location":"concepts/#schemas","title":"Schemas","text":"<p>Defines the structure of metadata to be extracted or queried. This is equivalent to the schema that identifies the columns/fields within a database table. Internally, the Collection organizes the metadata as defined by the schema for optimized RAG or Structured Query.</p>"},{"location":"concepts/#query","title":"Query","text":"<p>A query that provides an input in the form of natural language text, and expects a response in the form of a list of \"result objects\". A Query can be of either one of two types:</p> <ul> <li> <p>RAG Query that returns the top search results which are semantically most similar to the input text. For example, a query for text-based RAG will generate text results. A RAG Query must be associated with a Model in order to perform similarity search on embeddings</p> </li> <li> <p>Structured Query that returns the search results from an exact match query on a structured table. The data type for a \"result object\" will be a record containing one or more fields derived from the table schema. (Note: Currently limit support is available for Structure Query)</p> </li> </ul> <p>A Query must be associated with a Collection, and executed in the context of a User (e.g. by providing S3 access key + secret key pair). The credentials provided in the context will be used to authenticate the User and authorize the results from the Query.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-or-update-python","title":"Install or update Python","text":"<p>Before installing pydi-client, install Python 3.11.2 or higher.  </p> <p>For information about how to get the latest version of Python, see the official Python documentation.</p>"},{"location":"installation/#setup-a-virtual-environment","title":"Setup a virtual environment","text":"<p>Once supported Python is installed, create a virtual environment and activate it</p> <pre><code>python -m venv /path\n...\nsource /path/bin/activate\n\n</code></pre> <p>This will provide an isolated space for all installed python packages.</p>"},{"location":"installation/#install-with-pip","title":"Install with pip:","text":"<pre><code>pip install pydi-client\n</code></pre> <p>For specific versions of pydi-client</p> <pre><code>pip install pydi-client==1.0.0\n\npip install pydi-client&gt;=1.0.0\n\n</code></pre>"},{"location":"tutorial/","title":"Data Intelligence SDK Tutorial","text":"<p>This tutorial provides a step-by-step guide for using the Data Intelligence (DI) SDK, focusing on both administrative and non-administrative workflows. It covers client setup, pipeline and collection creation, bucket assignment, and similarity search.</p>"},{"location":"tutorial/#logging","title":"Logging","text":"<p>di_sdk.log will be created with detailed logs in CWD. Set env variable LOG_LEVEL to adjust the logging. (For ex: export LOG_LEVEL=DEBUG to enable debug logging for more detailed analysis)</p>"},{"location":"tutorial/#1-admin-operations-setting-up-diadminclient","title":"1. Admin Operations: Setting Up DIAdminClient","text":"<p>Administrative operations (CRUD for pipelines, collections, schemas, models) require the <code>DIAdminClient</code>. This client needs authentication credentials.</p> <pre><code>from pydi_client.di_client import DIAdminClient\n\n# Initialize DIAdminClient with URI, username, and password\nadmin_client = DIAdminClient(\n    uri=\"https://your-di-instance.com:&lt;port&gt;\",\n    username=\"admin_user\",\n    password=\"your_password\"\n)\n</code></pre> <p>Use DIAdminClient for: - Creating/deleting pipelines and collections - Assigning/unassigning buckets - Managing schemas and embedding models</p>"},{"location":"tutorial/#2-non-admin-operations-setting-up-diclient","title":"2. Non-Admin Operations: Setting Up DIClient","text":"<p>For non-admin tasks (querying collections, retrieving pipelines, similarity search), use <code>DIClient</code>. Note that <code>DIAdminClient</code> extends <code>DIClient</code>, but for read-only/search operations, use <code>DIClient</code>.</p> <pre><code>from pydi_client.di_client import DIClient\n\n# Initialize DIClient with the DI platform URI\nclient = DIClient(uri=\"https://your-di-instance.com:&lt;port&gt;\")\n</code></pre> <p>Use DIClient for: - Querying collections and pipelines - Performing similarity searches</p>"},{"location":"tutorial/#3-getting-list-of-existing-schemas-admin","title":"3. Getting List of Existing Schemas (Admin)","text":"<p>Before creating a pipeline, you may want to see which schemas are available in your DI instance. This helps you select the correct schema for your workflow.</p> <pre><code># Get all schemas available in the DI platform\nschemas_response = admin_client.get_all_schemas()\nprint(schemas_response)\n# Output: V1ListSchemasResponse(\n#     schemas=[SchemaRecordSummary(name=\"example_schema\", ...), ...]\n# )\n</code></pre> <p>You can inspect the schema names and details to choose the appropriate schema for your pipeline.</p> <p>Note: Currently creating new schemas is not supported. Require to use existing schemas available by default</p>"},{"location":"tutorial/#4-getting-list-of-existing-embedding-models-admin-rag-workflow","title":"4. Getting List of Existing Embedding Models (Admin, RAG Workflow)","text":"<p>If you are setting up a RAG (Retrieval-Augmented Generation) pipeline, you need to select an embedding model supported by DI.</p> <pre><code># Get all embedding models available in the DI platform\nmodels_response = admin_client.get_all_embedding_models()\nprint(models_response)\n# Output: V1ListModelsResponse(\n#     models=[ModelRecordSummary(name=\"example_model\", ...), ...]\n# )\n</code></pre> <p>Review the available models and select the one that fits your use case.</p> <p>Note: Currently creating new embedding models is not supported. Require to use existing models available by default</p>"},{"location":"tutorial/#5-creating-a-pipeline-admin","title":"5. Creating a Pipeline (Admin)","text":"<p>A pipeline defines how data is processed and ingested. Use <code>create_pipeline</code> in <code>DIAdminClient</code> to set up a pipeline.</p> <pre><code># Create a RAG pipeline\npipeline_response = admin_client.create_pipeline(\n    name=\"example_rag_pipeline\",\n    pipeline_type=\"rag\",  # or \"metadata\"\n    model=\"example_model\",  # Optional: specify embedding model\n    custom_func=\"custom_processing_function\",  # Optional\n    event_filter_object_suffix=[\"*.txt\", \"*.pdf\"],  # File types to ingest\n    event_filter_max_object_size=10485760,  # Max file size in bytes\n    schema=\"example_schema\"  # Optional: specify schema\n)\n\nprint(pipeline_response)\n# Output: V1CreatePipelineResponse(\n#     success=True,\n#     message=\"Pipeline 'example_rag_pipeline' created successfully.\"\n# )\n</code></pre> <p>NOTE: - For pipeline_type = \"rag\" (RAG workflows), <code>model</code> &amp; <code>event_filter_max_object_size</code> are required. <code>schema</code> is optional and <code>custom_fuc</code> is not supported. - For metadata pipelines, <code>custom_func</code> is required. <code>schema</code> &amp; <code>event_filter_max_object_size</code> are optional and <code>model</code> is not supported.</p>"},{"location":"tutorial/#6-creating-a-collection-admin","title":"6. Creating a Collection (Admin)","text":"<p>Collections are logical groupings of data that use a pipeline for ingestion and processing.</p> <pre><code># Create a collection using the pipeline created above\ncollection_response = admin_client.create_collection(\n    name=\"example_collection\",\n    pipeline=\"example_rag_pipeline\",\n    buckets=[]  # You can assign buckets now or later\n)\n\nprint(collection_response)\n# Output: V1CollectionResponse(\n#     name=\"example_collection\",\n#     pipeline=\"example_rag_pipeline\",\n#     buckets=[]\n# )\n</code></pre>"},{"location":"tutorial/#7-assigning-s3-buckets-to-a-collection-admin","title":"7. Assigning S3 Buckets to a Collection (Admin)","text":"<p>Assigning buckets triggers the pipeline and enables data ingestion. Buckets typically refer to S3 buckets from X10K.</p> <pre><code># Assign S3 buckets to the collection\nbucket_update_response = admin_client.assign_buckets_to_collection(\n    collection_name=\"example_collection\",\n    buckets=[\"homefleet-bucket1\", \"homefleet-bucket2\"]\n)\n\nprint(bucket_update_response)\n# Output: BucketUpdateResponse(\n#     success=True,\n#     message=\"Buckets assigned successfully to collection 'example_collection'.\"\n# )\n</code></pre> <p>Note: You can also unassign buckets using <code>unassign_buckets_from_collection</code>.</p>"},{"location":"tutorial/#8-performing-similarity-search-user","title":"8. Performing Similarity Search (User)","text":"<p>Once data is ingested, users can perform similarity searches using the <code>DIClient</code>. This operation requires S3 access and S3 secret keys for authorization of data from X10K buckets. Only the authozided data can be retrieved using similarity search.</p> <pre><code># Perform a similarity search in a collection\nresults = client.similarity_search(\n    query=\"machine learning\",\n    collection_name=\"example_collection\",\n    top_k=5,\n    access_key=\"your_access_key\",\n    secret_key=\"your_secret_key\",\n)\n\nprint(results)\n# Output: List of dictionaries with top-k similar results\n# [\n#     {\n#         \"dataChunk\": \"chunk1\",\n#         \"score\": 0.9,\n#         \"chunkMetadata\": {\n#             \"objectKey\": \"value\",\n#             \"startCharIndex\": 1,\n#             \"endCharIndex\": 2,\n#             \"bucketName\": \"string\",\n#             \"pageLabel\": \"string\",\n#             \"versionId\": \"string\",\n#         }\n#     },\n#     ...\n# ]\n</code></pre>"},{"location":"tutorial/#summary","title":"Summary","text":"<ul> <li>Use <code>DIAdminClient</code> for all admin operations (CRUD on pipelines, collections, schemas, models).</li> <li>Use <code>DIClient</code> for non-admin operations (search, read-only queries).</li> <li>The typical workflow is: Create Pipeline \u2192 Create Collection \u2192 Assign Buckets \u2192 Ingest Data \u2192 Search Data.</li> <li>Refer to the API reference for more advanced features and error handling.</li> </ul>"},{"location":"api/model/","title":"Data model","text":""},{"location":"api/model/#pipeline","title":"Pipeline","text":""},{"location":"api/model/#pydi_client.data.pipeline.V1DeletePipelineResponse","title":"<code>V1DeletePipelineResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for deleting a pipeline. This model contains fields to indicate the status of the delete operation, any errors that occurred, and a message providing additional information.</p> <p>Attributes:</p> Name Type Description <code>status</code> <code>Optional[str]</code> <p>Status of the delete operation.</p> <code>Status</code> <code>Optional[str]</code> <p>Alternative case for status of the delete operation.</p> <code>Error</code> <code>Optional[Dict[Any, Any]]</code> <p>Error message if the delete operation fails.</p> <code>success</code> <code>Optional[bool]</code> <p>Indicates if the delete operation was successful.</p> <code>message</code> <code>Optional[str]</code> <p>Message providing additional information about the operation.</p> Source code in <code>pydi_client/data/pipeline.py</code> <pre><code>class V1DeletePipelineResponse(BaseModel):\n\n    \"\"\"\n    Response model for deleting a pipeline.\n    This model contains fields to indicate the status of the delete operation,\n    any errors that occurred, and a message providing additional information.\n\n    Attributes:\n        status (Optional[str]): Status of the delete operation.\n        Status (Optional[str]): Alternative case for status of the delete operation.\n        Error (Optional[Dict[Any, Any]]): Error message if the delete operation fails.\n        success (Optional[bool]): Indicates if the delete operation was successful.\n        message (Optional[str]): Message providing additional information about the operation.\n    \"\"\"\n    status: Optional[str] = Field(\n        default_factory=str, description=\"Status of the delete operation\"\n    )\n    Status: Optional[str] = Field(\n        default_factory=str,\n        description=\"Status of the delete operation (alternative case)\",\n    )\n    Error: Optional[Dict[Any, Any]] = Field(\n        default_factory=dict, description=\"Error message if the delete operation fails\"\n    )\n    success: Optional[bool] = Field(\n        default=None, description=\"Indicates if the delete operation was successful\"\n    )\n    message: Optional[str] = Field(\n        default=None, description=\"Message providing additional information about the operation\"\n    )\n</code></pre>"},{"location":"api/model/#pydi_client.data.pipeline.FilterItem","title":"<code>FilterItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a filter item used in event filtering for pipelines. Attributes:     objectSuffix (List[str]): List of suffixes for objects to filter.     maxObjectSize (int): Maximum size of the object to filter.</p> Source code in <code>pydi_client/data/pipeline.py</code> <pre><code>class FilterItem(BaseModel):\n    \"\"\"\n    Represents a filter item used in event filtering for pipelines.\n    Attributes:\n        objectSuffix (List[str]): List of suffixes for objects to filter.\n        maxObjectSize (int): Maximum size of the object to filter.\n    \"\"\"\n    objectSuffix: List[str]\n    maxObjectSize: Optional[int] = Field(default=None)\n</code></pre>"},{"location":"api/model/#pydi_client.data.pipeline.V1CreatePipeline","title":"<code>V1CreatePipeline</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a request to create a pipeline. Attributes:     name (str): Name of the pipeline.     type (str): Type of the pipeline.     model (Optional[str]): Optional model associated with the pipeline.     eventFilter (FilterItem): Event filter criteria for the pipeline.     schema (Optional[str]): Optional schema for the pipeline.     customFunction (Optional[str]): Optional custom function for the pipeline.</p> Source code in <code>pydi_client/data/pipeline.py</code> <pre><code>class V1CreatePipeline(BaseModel):\n    \"\"\"\n    Represents a request to create a pipeline.\n    Attributes:\n        name (str): Name of the pipeline.\n        type (str): Type of the pipeline.\n        model (Optional[str]): Optional model associated with the pipeline.\n        eventFilter (FilterItem): Event filter criteria for the pipeline.\n        schema (Optional[str]): Optional schema for the pipeline.\n        customFunction (Optional[str]): Optional custom function for the pipeline.\n    \"\"\"\n    name: str\n    type: str\n    model: Optional[str]\n    eventFilter: FilterItem\n    schema: Optional[str]\n    customFunction: Optional[str]\n</code></pre>"},{"location":"api/model/#pydi_client.data.pipeline.V1CreatePipelineResponse","title":"<code>V1CreatePipelineResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for creating a pipeline. This model contains fields to indicate the success of the creation operation and a message providing additional information.</p> <p>Attributes:</p> Name Type Description <code>success</code> <code>bool</code> <p>Indicates if the pipeline creation was successful.</p> <code>message</code> <code>str</code> <p>Message providing additional information about the operation.</p> Source code in <code>pydi_client/data/pipeline.py</code> <pre><code>class V1CreatePipelineResponse(BaseModel):\n    \"\"\"\n    Response model for creating a pipeline.\n    This model contains fields to indicate the success of the creation operation\n    and a message providing additional information.\n\n    Attributes:\n        success (bool): Indicates if the pipeline creation was successful.\n        message (str): Message providing additional information about the operation.\n    \"\"\"\n    success: bool\n    message: str\n</code></pre>"},{"location":"api/model/#pydi_client.data.pipeline.BucketUpdateResponse","title":"<code>BucketUpdateResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for updating buckets in a collection. This model contains fields to indicate the success of the update operation and a message providing additional information. Attributes:     success (bool): Indicates if the bucket update was successful.     message (str): Message providing additional information about the operation.</p> Source code in <code>pydi_client/data/pipeline.py</code> <pre><code>class BucketUpdateResponse(BaseModel):\n    \"\"\"\n    Response model for updating buckets in a collection.\n    This model contains fields to indicate the success of the update operation\n    and a message providing additional information.\n    Attributes:\n        success (bool): Indicates if the bucket update was successful.\n        message (str): Message providing additional information about the operation.\n    \"\"\"\n    success: bool\n    message: str\n</code></pre>"},{"location":"api/model/#pydi_client.data.pipeline.NodeWithScore","title":"<code>NodeWithScore</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a node with its associated score and metadata. Attributes:     score (float): Score associated with the node.     dataChunk (str): Data chunk associated with the node.     chunkMetadata (Optional[Dict[str, Any]]): Optional metadata associated with the data chunk</p> Source code in <code>pydi_client/data/pipeline.py</code> <pre><code>class NodeWithScore(BaseModel):\n    \"\"\"\n    Represents a node with its associated score and metadata.\n    Attributes:\n        score (float): Score associated with the node.\n        dataChunk (str): Data chunk associated with the node.\n        chunkMetadata (Optional[Dict[str, Any]]): Optional metadata associated with the data chunk\n    \"\"\"\n    score: float\n    dataChunk: str\n    chunkMetadata: Optional[Dict[str, Any]] = Field(default_factory=dict)\n</code></pre>"},{"location":"api/model/#pydi_client.data.pipeline.V1SimilaritySearchResponse","title":"<code>V1SimilaritySearchResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for similarity search in a collection. This model contains fields to indicate the success of the search operation, a message providing additional information, and the results of the search. Attributes:     success (bool): Indicates if the similarity search was successful.     message (str): Message providing additional information about the operation.     results (Optional[List[NodeWithScore]]): List of nodes with their scores returned by the search.</p> Source code in <code>pydi_client/data/pipeline.py</code> <pre><code>class V1SimilaritySearchResponse(BaseModel):\n    \"\"\"\n    Response model for similarity search in a collection.\n    This model contains fields to indicate the success of the search operation,\n    a message providing additional information, and the results of the search.\n    Attributes:\n        success (bool): Indicates if the similarity search was successful.\n        message (str): Message providing additional information about the operation.\n        results (Optional[List[NodeWithScore]]): List of nodes with their scores returned by the search.\n    \"\"\"\n    success: bool\n    message: str\n    results: Optional[List[NodeWithScore]] = Field(default_factory=list)\n</code></pre>"},{"location":"api/model/#schema","title":"Schema","text":""},{"location":"api/model/#pydi_client.data.schema.SchemaItem","title":"<code>SchemaItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a schema item with a name and type. Attributes:     name (str): Name of the schema field.     type (str): Type of the schema field.</p> Source code in <code>pydi_client/data/schema.py</code> <pre><code>class SchemaItem(BaseModel):\n    \"\"\"\n    Represents a schema item with a name and type.\n    Attributes:\n        name (str): Name of the schema field.\n        type (str): Type of the schema field.\n    \"\"\"\n    name: str = Field(..., description=\"field name\")\n    type: str = Field(..., description=\"field type\")\n</code></pre>"},{"location":"api/model/#pydi_client.data.schema.V1SchemasResponse","title":"<code>V1SchemasResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a response containing schema information. This model contains fields to represent the schema name, type, and a list of schema items. Attributes:     name (str): Name of the schema.     type (str): Type of the schema.     schema (List[SchemaItem]): List of schema fields.</p> Source code in <code>pydi_client/data/schema.py</code> <pre><code>class V1SchemasResponse(BaseModel):\n    \"\"\"\n    Represents a response containing schema information.\n    This model contains fields to represent the schema name, type, and a list of schema items.\n    Attributes:\n        name (str): Name of the schema.\n        type (str): Type of the schema.\n        schema (List[SchemaItem]): List of schema fields.\n    \"\"\"\n    name: str = Field(..., description=\"schema name\")\n    type: str = Field(..., description=\"schema type\")\n    schema: List[SchemaItem] = Field(\n        ..., alias=\"schema\", description=\"list of schema fields\"\n    )\n</code></pre>"},{"location":"api/model/#pydi_client.data.schema.SchemaRecordSummary","title":"<code>SchemaRecordSummary</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a summary of a schema record. Attributes:     id (str): Unique identifier for the schema record.     name (str): Name of the schema record.</p> Source code in <code>pydi_client/data/schema.py</code> <pre><code>class SchemaRecordSummary(BaseModel):\n    \"\"\"\n    Represents a summary of a schema record.\n    Attributes:\n        id (str): Unique identifier for the schema record.\n        name (str): Name of the schema record.\n    \"\"\"\n    id: str\n    name: str\n</code></pre>"},{"location":"api/model/#pydi_client.data.schema.V1ListSchemasResponse","title":"<code>V1ListSchemasResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for listing available schemas. This model contains a list of schema records. Attributes:     schemas (List[SchemaRecordSummary]): List of schema records.</p> Source code in <code>pydi_client/data/schema.py</code> <pre><code>class V1ListSchemasResponse(BaseModel):\n    \"\"\"\n    Response model for listing available schemas.\n    This model contains a list of schema records.\n    Attributes:\n        schemas (List[SchemaRecordSummary]): List of schema records.\n    \"\"\"\n    schemas: List[SchemaRecordSummary]\n</code></pre>"},{"location":"api/model/#model","title":"Model","text":""},{"location":"api/model/#pydi_client.data.model.V1ModelsResponse","title":"<code>V1ModelsResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for listing available models. This model contains fields to represent the system model name, model name, capabilities, dimensionality, maximum tokens supported by the model, and the version of the model. Attributes:     name (str): System model name.     modelName (str): Model name.     capabilities (List[str]): List of capabilities such as embedding, large language model, etc.     dimension (int): Model dimensionality.     maximumTokens (int): Maximum token size supported by the model.     version (str): Model version.</p> Source code in <code>pydi_client/data/model.py</code> <pre><code>class V1ModelsResponse(BaseModel):\n    \"\"\"\n    Response model for listing available models.\n    This model contains fields to represent the system model name, model name,\n    capabilities, dimensionality, maximum tokens supported by the model, and the version of the model.\n    Attributes:\n        name (str): System model name.\n        modelName (str): Model name.\n        capabilities (List[str]): List of capabilities such as embedding, large language model, etc.\n        dimension (int): Model dimensionality.\n        maximumTokens (int): Maximum token size supported by the model.\n        version (str): Model version.\n    \"\"\"\n\n    name: str = Field(..., description=\"system model name\")\n    modelName: str = Field(..., description=\"model name\")\n    capabilities: List[str] = Field(...,\n                                    description=\"embedding, large language model etc\")\n    dimension: int = Field(..., description=\"model dimensionality\")\n    maximumTokens: int = Field(...,\n                               description=\"max token size supported by the model\")\n    version: str = Field(..., description=\"model version\")\n</code></pre>"},{"location":"api/model/#pydi_client.data.model.ModelRecordSummary","title":"<code>ModelRecordSummary</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a summary of a model record. Attributes:     id (str): Unique identifier for the model record.     name (str): Name of the model record.</p> Source code in <code>pydi_client/data/model.py</code> <pre><code>class ModelRecordSummary(BaseModel):\n    \"\"\"\n    Represents a summary of a model record.\n    Attributes:\n        id (str): Unique identifier for the model record.\n        name (str): Name of the model record.\n    \"\"\"\n    id: str\n    name: str\n</code></pre>"},{"location":"api/model/#pydi_client.data.model.V1ListModelsResponse","title":"<code>V1ListModelsResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for listing available models. This model contains a list of model records. Attributes:     models (List[ModelRecordSummary]): List of model records.</p> Source code in <code>pydi_client/data/model.py</code> <pre><code>class V1ListModelsResponse(BaseModel):\n    \"\"\"\n    Response model for listing available models.\n    This model contains a list of model records.\n    Attributes:\n        models (List[ModelRecordSummary]): List of model records.\n    \"\"\"\n    models: List[ModelRecordSummary]\n</code></pre>"},{"location":"api/model/#collection-manager","title":"Collection Manager","text":""},{"location":"api/model/#pydi_client.data.collection_manager.V1DeleteCollectionResponse","title":"<code>V1DeleteCollectionResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for deleting a collection. This model contains fields to indicate the status of the delete operation, any errors that occurred, and a message providing additional information. Attributes:     status (Optional[str]): Status of the delete operation.     Status (Optional[str]): Alternative case for status of the delete operation.     Error (Optional[Dict[Any, Any]]): Error message if the delete operation fails.     success (Optional[bool]): Indicates if the delete operation was successful.     message (Optional[str]): Message providing additional information about the operation.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class V1DeleteCollectionResponse(BaseModel):\n    \"\"\"\n    Response model for deleting a collection.\n    This model contains fields to indicate the status of the delete operation,\n    any errors that occurred, and a message providing additional information.\n    Attributes:\n        status (Optional[str]): Status of the delete operation.\n        Status (Optional[str]): Alternative case for status of the delete operation.\n        Error (Optional[Dict[Any, Any]]): Error message if the delete operation fails.\n        success (Optional[bool]): Indicates if the delete operation was successful.\n        message (Optional[str]): Message providing additional information about the operation.\n    \"\"\"\n    status: Optional[str] = Field(\n        default_factory=str, description=\"Status of the delete operation\"\n    )\n    Status: Optional[str] = Field(\n        default_factory=str,\n        description=\"Status of the delete operation (alternative case)\",\n    )\n    Error: Optional[Dict[Any, Any]] = Field(\n        default_factory=dict, description=\"Error message if the delete operation fails\"\n    )\n    success: Optional[bool] = Field(\n        default=None, description=\"Indicates if the delete operation was successful\"\n    )\n    message: Optional[str] = Field(\n        default=None, description=\"Message providing additional information about the operation\"\n    )\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.V1CreateCollection","title":"<code>V1CreateCollection</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a request to create a collection. Attributes:     name (str): Name of the collection.     pipeline (str): Pipeline associated with the collection.     buckets (Optional[List[str]]): Optional list of buckets associated with the collection.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class V1CreateCollection(BaseModel):\n    \"\"\"\n    Represents a request to create a collection.\n    Attributes:\n        name (str): Name of the collection.\n        pipeline (str): Pipeline associated with the collection.\n        buckets (Optional[List[str]]): Optional list of buckets associated with the collection.\n    \"\"\"\n    name: str\n    pipeline: str\n    buckets: Optional[List[str]]\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.V1CollectionResponse","title":"<code>V1CollectionResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a response containing collection information. This model contains fields to represent the collection name, pipeline, and an optional list of buckets associated with the collection. Attributes:     name (str): Name of the collection.     pipeline (str): Pipeline associated with the collection.     buckets (Optional[List[str]]): Optional list of buckets associated with the collection.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class V1CollectionResponse(BaseModel):\n    \"\"\"\n    Represents a response containing collection information.\n    This model contains fields to represent the collection name, pipeline, and an optional list of buckets\n    associated with the collection.\n    Attributes:\n        name (str): Name of the collection.\n        pipeline (str): Pipeline associated with the collection.\n        buckets (Optional[List[str]]): Optional list of buckets associated with the collection.\n    \"\"\"\n    name: str\n    pipeline: str\n    buckets: Optional[List[str]] = Field(\n        default_factory=list,\n        description=\"List of buckets associated with the collection\",\n    )\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.BucketUpdateRequest","title":"<code>BucketUpdateRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a request to update the buckets of a collection. Attributes:     name (str): Name of the collection.     buckets (List[str]): List of buckets to be associated with the collection.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class BucketUpdateRequest(BaseModel):\n    \"\"\"\n    Represents a request to update the buckets of a collection.\n    Attributes:\n        name (str): Name of the collection.\n        buckets (List[str]): List of buckets to be associated with the collection.\n    \"\"\"\n    name: str\n    buckets: List[str]\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.V1PipelineResponse","title":"<code>V1PipelineResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a response containing pipeline information. This model contains fields to represent the pipeline name, type, model, custom function, event filter criteria, and schema associated with the pipeline. Attributes:     name (str): Name of the pipeline.     type (str): Type of the pipeline.     model (Optional[str]): Optional model associated with the pipeline.     customFunction (Optional[str]): Optional custom function for the pipeline.     eventFilter (Dict[str, Any]): Event filter criteria for the pipeline.     schema (str): Schema associated with the pipeline.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class V1PipelineResponse(BaseModel):\n    \"\"\"\n    Represents a response containing pipeline information.\n    This model contains fields to represent the pipeline name, type, model, custom function,\n    event filter criteria, and schema associated with the pipeline.\n    Attributes:\n        name (str): Name of the pipeline.\n        type (str): Type of the pipeline.\n        model (Optional[str]): Optional model associated with the pipeline.\n        customFunction (Optional[str]): Optional custom function for the pipeline.\n        eventFilter (Dict[str, Any]): Event filter criteria for the pipeline.\n        schema (str): Schema associated with the pipeline.\n    \"\"\"\n    name: str\n    type: str\n    model: Optional[str] = Field(default_factory=str)\n    customFunction: Optional[str] = Field(default_factory=str)\n    eventFilter: Dict[str, Any]\n    schema: str\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.ListCollectionItem","title":"<code>ListCollectionItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a summary of a collection item. Attributes:     id (Optional[str]): Unique identifier for the collection item.     name (Optional[str]): Name of the collection item.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class ListCollectionItem(BaseModel):\n    \"\"\"\n    Represents a summary of a collection item.\n    Attributes:\n        id (Optional[str]): Unique identifier for the collection item.\n        name (Optional[str]): Name of the collection item.\n    \"\"\"\n    id: Optional[str] = Field(None, description=\"collection id\")\n    name: Optional[str] = Field(None, description=\"collection name\")\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.ListCollection","title":"<code>ListCollection</code>","text":"<p>               Bases: <code>RootModel[List[ListCollectionItem]]</code></p> <p>Response model for listing available collections. This model contains a list of collection items. Attributes:     root (List[ListCollectionItem]): List of collection items.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class ListCollection(RootModel[List[ListCollectionItem]]):\n    \"\"\"\n    Response model for listing available collections.\n    This model contains a list of collection items.\n    Attributes:\n        root (List[ListCollectionItem]): List of collection items.\n    \"\"\"\n    root: List[ListCollectionItem] = Field(\n        ...,\n        examples=[\n            [{\"id\": \"1\", \"name\": \"collection1\"}, {\"id\": \"2\", \"name\": \"collection2\"}]\n        ],\n    )\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.ListPipeline","title":"<code>ListPipeline</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a summary of a pipeline. Attributes:     id (Optional[str]): Unique identifier for the pipeline.     name (Optional[str]): Name of the pipeline.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class ListPipeline(BaseModel):\n    \"\"\"\n    Represents a summary of a pipeline.\n    Attributes:\n        id (Optional[str]): Unique identifier for the pipeline.\n        name (Optional[str]): Name of the pipeline.\n    \"\"\"\n    id: Optional[str] = Field(None, description=\"pipeline id\")\n    name: Optional[str] = Field(None, description=\"pipeline name\")\n</code></pre>"},{"location":"api/model/#pydi_client.data.collection_manager.ListPipelines","title":"<code>ListPipelines</code>","text":"<p>               Bases: <code>RootModel[List[ListPipeline]]</code></p> <p>Response model for listing available pipelines. This model contains a list of pipelines. Attributes:     root (List[ListPipeline]): List of pipelines.</p> Source code in <code>pydi_client/data/collection_manager.py</code> <pre><code>class ListPipelines(RootModel[List[ListPipeline]]):\n    \"\"\"\n    Response model for listing available pipelines.\n    This model contains a list of pipelines.\n    Attributes:\n        root (List[ListPipeline]): List of pipelines.\n    \"\"\"\n    root: List[ListPipeline] = Field(\n        ...,\n        examples=[[{\"id\": \"1\", \"name\": \"pipeline1\"}, {\"id\": \"2\", \"name\": \"pipeline2\"}]],\n    )\n</code></pre>"},{"location":"api/reference/","title":"API reference","text":""},{"location":"api/reference/#pydi_client.di_client.DIClient","title":"<code>DIClient</code>","text":"<p>DIClient The <code>DIClient</code> class serves as a client interface for interacting with the Data Intelligence (DI) solution. It provides methods to retrieve and interact with various data entities such as collections, pipelines, schemas, and embedding models. Additionally, it supports performing similarity searches within collections. This class is designed for general-purpose usage and is intended for scenarios where non-administrative operations are required. For administrative operations, such as managing users, permissions, or system-level configurations, the <code>DIAdminClient</code> class should be used instead.</p>"},{"location":"api/reference/#pydi_client.di_client.DIClient--purpose","title":"Purpose:","text":"<p>The <code>DIClient</code> class simplifies the interaction with the DI solution by abstracting the underlying API calls and providing a Pythonic interface for common operations. It is particularly useful for developers and data scientists who need to work with DI collections, pipelines, schemas, and embedding models in their workflows.</p>"},{"location":"api/reference/#pydi_client.di_client.DIClient--key-features","title":"Key Features:","text":"<ol> <li>Retrieve specific or all collections, pipelines.</li> <li>Perform similarity searches within a specified collection.</li> <li>Provides a session object for managing API interactions.</li> </ol>"},{"location":"api/reference/#pydi_client.di_client.DIClient--usage","title":"Usage:","text":"<ul> <li>Use this class for non-administrative tasks such as querying collections, retrieving pipelines, or performing     similarity searches.</li> <li>Avoid using this class for administrative tasks. For such operations, use the <code>DIAdminClient</code> class.</li> </ul> Source code in <code>pydi_client/di_client.py</code> <pre><code>class DIClient:\n    \"\"\"\n    DIClient\n    The `DIClient` class serves as a client interface for interacting with the Data Intelligence (DI) solution.\n    It provides methods to retrieve and interact with various data entities such as collections, pipelines, schemas,\n    and embedding models. Additionally, it supports performing similarity searches within collections.\n    This class is designed for general-purpose usage and is intended for scenarios where non-administrative\n    operations are required. For administrative operations, such as managing users, permissions, or system-level\n    configurations, the `DIAdminClient` class should be used instead.\n\n    Purpose:\n    --------\n    The `DIClient` class simplifies the interaction with the DI solution by abstracting the underlying API calls\n    and providing a Pythonic interface for common operations. It is particularly useful for developers and data\n    scientists who need to work with DI collections, pipelines, schemas, and embedding models in their workflows.\n\n    Key Features:\n    -------------\n    1. Retrieve specific or all collections, pipelines.\n    2. Perform similarity searches within a specified collection.\n    3. Provides a session object for managing API interactions.\n\n    Usage:\n    ------\n    - Use this class for non-administrative tasks such as querying collections, retrieving pipelines, or performing\n        similarity searches.\n    - Avoid using this class for administrative tasks. For such operations, use the `DIAdminClient` class.\n    \"\"\"\n\n    def __init__(self, *, uri=None) -&gt; None:\n        self._session = Session(uri=uri)  # type: ignore\n\n    @property\n    def session(self) -&gt; Session:\n        \"\"\"\n        Property to get the session object.\n\n        Returns:\n            Session: The session object used for making API requests. This session is initialized with the provided URI.\n\n        \"\"\"\n        return self._session\n\n    def get_collection(self, *, name: str) -&gt; V1CollectionResponse:\n        \"\"\"\n        Retrieve a collection by its name.\n\n        Args:\n            name (str): The name of the collection to retrieve. This is a required keyword-only argument.\n\n        Returns:\n            V1CollectionResponse: The collection object corresponding to the\n            specified name.\n\n        Example usage:\n            ```python\n                client = DIClient(uri=\"https://example.com\")\n                collection = client.get_collection(name=\"example_collection\")\n                print(collection)\n                # Output: V1CollectionResponse(\n            #     name=\"example_collection\",\n            #     buckets=[\"bucket-1\", \"bucket-2\"],\n            #     pipeline=\"rag-pipeline\"\n            # )\n            ```\n        \"\"\"\n        return CollectionAPI(self.session).get_collection(name=name)\n\n    def get_all_collections(self) -&gt; ListCollection:\n        \"\"\"\n        Retrieves all collections available in the system.\n\n        Returns:\n            V1ListCollectionsResponse: A response object containing a list of\n            collections available in the system.\n\n        Example usage:\n            ```python\n                client = DIClient(uri=\"https://example.com\")\n                collections = client.get_all_collections()\n                for collection in collections:\n                    print(collection.name)\n            # Output:\n            ListCollection(\n                root=[\n                    ListCollectionItem(id=\"1\", name=\"collection1\"),\n                    ListCollectionItem(id=\"2\", name=\"collection2\")\n                ]\n            )\n            ```\n        \"\"\"\n\n        return CollectionAPI(self.session).get_collections()\n\n    def get_pipeline(self, *, name: str) -&gt; V1PipelineResponse:\n        \"\"\"\n        Retrieve a pipeline by its name.\n        This method fetches a pipeline object from the PipelineAPI using the provided name.\n\n        Args:\n            name (str): The name of the pipeline to retrieve. This is a required keyword-only argument.\n\n        Returns:\n            DescribePipelineRecordResponse: The response object containing details about the pipeline.\n\n        Example usage:\n                ```python\n                client = DIClient(uri=\"https://example.com\")\n                pipeline = client.get_pipeline(name=\"example_pipeline\")\n                print(pipeline)\n                # Output: V1PipelineResponse(\n                #     name=\"example_pipeline\",\n                #     type=\"rag\",\n                #     model=\"example_model\",\n                #     customFunction=\"custom_processing_function\",\n                #     eventFilter={\"objectSuffix\": [\"*.txt\", \"*.pdf\"],\n                #                  \"maxObjectSize\": 10485760},\n                #     schema=\"example_schema\"\n                # )\n                ```\n        \"\"\"\n        return PipelineAPI(self.session).get_pipeline(name=name)\n\n    def get_all_pipelines(self) -&gt; ListPipelines:\n        \"\"\"\n        Retrieves all pipelines available in the system.\n\n        Returns:\n            ListPipelineRecordsResponse: A response object containing a list of\n            pipelines available in the system.\n\n        Example usage:\n            ```python\n                client = DIClient(uri=\"https://example.com\")\n                pipelines = client.get_all_pipelines()\n                for pipeline in pipelines.pipelines:\n                    print(pipeline.name)\n            # Output:\n            ListPipelines(\n                root=[\n                    ListPipeline(id=\"1\", name=\"pipeline1\"),\n                    ListPipeline(id=\"2\", name=\"pipeline2\")\n                ]\n            )\n            ```\n        \"\"\"\n        return PipelineAPI(self.session).get_pipelines()\n\n    def similarity_search(\n        self,\n        *,\n        access_key: str,\n        secret_key: str,\n        collection_name: str,\n        query: str,\n        top_k: int,\n        search_parameters: Union[Any, Dict[str, Any]] = None,\n    ) -&gt; Union[Any, List[Dict[str, Any]]]:\n        \"\"\"\n        Perform a similarity search on a specified collection using the provided query.\n        This method interacts with the SimilaritySearchAPI to retrieve the most relevant\n        results from a collection based on the given query. The results are ranked by\n        similarity, and the top `k` results are returned.\n\n        Args:\n            query (str): The search query string used to find similar items in the collection.\n            collection_name (str): The name of the collection to search within.\n            top_k (int): The number of top similar results to retrieve.\n            access_key (str): The access key for authentication with the API.\n            secret_key (str): The secret key for authentication with the API.\n            search_parameters (Optional[Union[Any, Dict[str, Any]]]): Additional search parameters\n                that can be passed to the API for fine-tuning the search behavior.\n\n        Returns:\n            Union[Any, List[Dict[str, Any]]]: A list of dictionaries containing the top `k` similar results, or another data type depending on the API's response.\n\n        Example usage:\n            ```python\n            client = DIClient(session)\n            results = client.similarity_search(\n                query=\"machine learning\",\n                collection_name=\"research_papers\",\n                top_k=5,\n                access_key=\"your_access_key\",\n                secret_key=\"your_secret_key\",\n                search_parameters={\"metric\": \"cosine\", \"ef_search\": \"100\"}\n            )\n            print(results)\n            [\n                {\n                    \"dataChunk\": \"chunk1\",\n                    \"score\": 0.9,\n                    \"chunkMetadata\": {\n                        \"objectKey\": \"value\",\n                        \"startCharIndex\": 1,\n                        \"endCharIndex\": 2,\n                        \"bucketName\": \"string\",\n                        \"pageLabel\": \"string\",\n                        \"versionId\": \"string\",\n                    }\n                }\n            ]\n            ```\n        \"\"\"\n        return SimilaritySearchAPI(self.session).search(\n            query=query,\n            collection_name=collection_name,\n            top_k=top_k,\n            access_key=access_key,\n            secret_key=secret_key,\n            search_parameters=search_parameters,\n        )\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIClient.session","title":"<code>session</code>  <code>property</code>","text":"<p>Property to get the session object.</p> <p>Returns:</p> Name Type Description <code>Session</code> <code>Session</code> <p>The session object used for making API requests. This session is initialized with the provided URI.</p>"},{"location":"api/reference/#pydi_client.di_client.DIClient.get_collection","title":"<code>get_collection(*, name)</code>","text":"<p>Retrieve a collection by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the collection to retrieve. This is a required keyword-only argument.</p> required <p>Returns:</p> Name Type Description <code>V1CollectionResponse</code> <code>V1CollectionResponse</code> <p>The collection object corresponding to the</p> <code>V1CollectionResponse</code> <p>specified name.</p> Example usage <pre><code>    client = DIClient(uri=\"https://example.com\")\n    collection = client.get_collection(name=\"example_collection\")\n    print(collection)\n    # Output: V1CollectionResponse(\n#     name=\"example_collection\",\n#     buckets=[\"bucket-1\", \"bucket-2\"],\n#     pipeline=\"rag-pipeline\"\n# )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_collection(self, *, name: str) -&gt; V1CollectionResponse:\n    \"\"\"\n    Retrieve a collection by its name.\n\n    Args:\n        name (str): The name of the collection to retrieve. This is a required keyword-only argument.\n\n    Returns:\n        V1CollectionResponse: The collection object corresponding to the\n        specified name.\n\n    Example usage:\n        ```python\n            client = DIClient(uri=\"https://example.com\")\n            collection = client.get_collection(name=\"example_collection\")\n            print(collection)\n            # Output: V1CollectionResponse(\n        #     name=\"example_collection\",\n        #     buckets=[\"bucket-1\", \"bucket-2\"],\n        #     pipeline=\"rag-pipeline\"\n        # )\n        ```\n    \"\"\"\n    return CollectionAPI(self.session).get_collection(name=name)\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIClient.get_all_collections","title":"<code>get_all_collections()</code>","text":"<p>Retrieves all collections available in the system.</p> <p>Returns:</p> Name Type Description <code>V1ListCollectionsResponse</code> <code>ListCollection</code> <p>A response object containing a list of</p> <code>ListCollection</code> <p>collections available in the system.</p> Example usage <pre><code>    client = DIClient(uri=\"https://example.com\")\n    collections = client.get_all_collections()\n    for collection in collections:\n        print(collection.name)\n# Output:\nListCollection(\n    root=[\n        ListCollectionItem(id=\"1\", name=\"collection1\"),\n        ListCollectionItem(id=\"2\", name=\"collection2\")\n    ]\n)\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_all_collections(self) -&gt; ListCollection:\n    \"\"\"\n    Retrieves all collections available in the system.\n\n    Returns:\n        V1ListCollectionsResponse: A response object containing a list of\n        collections available in the system.\n\n    Example usage:\n        ```python\n            client = DIClient(uri=\"https://example.com\")\n            collections = client.get_all_collections()\n            for collection in collections:\n                print(collection.name)\n        # Output:\n        ListCollection(\n            root=[\n                ListCollectionItem(id=\"1\", name=\"collection1\"),\n                ListCollectionItem(id=\"2\", name=\"collection2\")\n            ]\n        )\n        ```\n    \"\"\"\n\n    return CollectionAPI(self.session).get_collections()\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIClient.get_pipeline","title":"<code>get_pipeline(*, name)</code>","text":"<p>Retrieve a pipeline by its name. This method fetches a pipeline object from the PipelineAPI using the provided name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the pipeline to retrieve. This is a required keyword-only argument.</p> required <p>Returns:</p> Name Type Description <code>DescribePipelineRecordResponse</code> <code>V1PipelineResponse</code> <p>The response object containing details about the pipeline.</p> Example usage <pre><code>client = DIClient(uri=\"https://example.com\")\npipeline = client.get_pipeline(name=\"example_pipeline\")\nprint(pipeline)\n# Output: V1PipelineResponse(\n#     name=\"example_pipeline\",\n#     type=\"rag\",\n#     model=\"example_model\",\n#     customFunction=\"custom_processing_function\",\n#     eventFilter={\"objectSuffix\": [\"*.txt\", \"*.pdf\"],\n#                  \"maxObjectSize\": 10485760},\n#     schema=\"example_schema\"\n# )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_pipeline(self, *, name: str) -&gt; V1PipelineResponse:\n    \"\"\"\n    Retrieve a pipeline by its name.\n    This method fetches a pipeline object from the PipelineAPI using the provided name.\n\n    Args:\n        name (str): The name of the pipeline to retrieve. This is a required keyword-only argument.\n\n    Returns:\n        DescribePipelineRecordResponse: The response object containing details about the pipeline.\n\n    Example usage:\n            ```python\n            client = DIClient(uri=\"https://example.com\")\n            pipeline = client.get_pipeline(name=\"example_pipeline\")\n            print(pipeline)\n            # Output: V1PipelineResponse(\n            #     name=\"example_pipeline\",\n            #     type=\"rag\",\n            #     model=\"example_model\",\n            #     customFunction=\"custom_processing_function\",\n            #     eventFilter={\"objectSuffix\": [\"*.txt\", \"*.pdf\"],\n            #                  \"maxObjectSize\": 10485760},\n            #     schema=\"example_schema\"\n            # )\n            ```\n    \"\"\"\n    return PipelineAPI(self.session).get_pipeline(name=name)\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIClient.get_all_pipelines","title":"<code>get_all_pipelines()</code>","text":"<p>Retrieves all pipelines available in the system.</p> <p>Returns:</p> Name Type Description <code>ListPipelineRecordsResponse</code> <code>ListPipelines</code> <p>A response object containing a list of</p> <code>ListPipelines</code> <p>pipelines available in the system.</p> Example usage <pre><code>    client = DIClient(uri=\"https://example.com\")\n    pipelines = client.get_all_pipelines()\n    for pipeline in pipelines.pipelines:\n        print(pipeline.name)\n# Output:\nListPipelines(\n    root=[\n        ListPipeline(id=\"1\", name=\"pipeline1\"),\n        ListPipeline(id=\"2\", name=\"pipeline2\")\n    ]\n)\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_all_pipelines(self) -&gt; ListPipelines:\n    \"\"\"\n    Retrieves all pipelines available in the system.\n\n    Returns:\n        ListPipelineRecordsResponse: A response object containing a list of\n        pipelines available in the system.\n\n    Example usage:\n        ```python\n            client = DIClient(uri=\"https://example.com\")\n            pipelines = client.get_all_pipelines()\n            for pipeline in pipelines.pipelines:\n                print(pipeline.name)\n        # Output:\n        ListPipelines(\n            root=[\n                ListPipeline(id=\"1\", name=\"pipeline1\"),\n                ListPipeline(id=\"2\", name=\"pipeline2\")\n            ]\n        )\n        ```\n    \"\"\"\n    return PipelineAPI(self.session).get_pipelines()\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIClient.similarity_search","title":"<code>similarity_search(*, access_key, secret_key, collection_name, query, top_k, search_parameters=None)</code>","text":"<p>Perform a similarity search on a specified collection using the provided query. This method interacts with the SimilaritySearchAPI to retrieve the most relevant results from a collection based on the given query. The results are ranked by similarity, and the top <code>k</code> results are returned.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query string used to find similar items in the collection.</p> required <code>collection_name</code> <code>str</code> <p>The name of the collection to search within.</p> required <code>top_k</code> <code>int</code> <p>The number of top similar results to retrieve.</p> required <code>access_key</code> <code>str</code> <p>The access key for authentication with the API.</p> required <code>secret_key</code> <code>str</code> <p>The secret key for authentication with the API.</p> required <code>search_parameters</code> <code>Optional[Union[Any, Dict[str, Any]]]</code> <p>Additional search parameters that can be passed to the API for fine-tuning the search behavior.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Any, List[Dict[str, Any]]]</code> <p>Union[Any, List[Dict[str, Any]]]: A list of dictionaries containing the top <code>k</code> similar results, or another data type depending on the API's response.</p> Example usage <pre><code>client = DIClient(session)\nresults = client.similarity_search(\n    query=\"machine learning\",\n    collection_name=\"research_papers\",\n    top_k=5,\n    access_key=\"your_access_key\",\n    secret_key=\"your_secret_key\",\n    search_parameters={\"metric\": \"cosine\", \"ef_search\": \"100\"}\n)\nprint(results)\n[\n    {\n        \"dataChunk\": \"chunk1\",\n        \"score\": 0.9,\n        \"chunkMetadata\": {\n            \"objectKey\": \"value\",\n            \"startCharIndex\": 1,\n            \"endCharIndex\": 2,\n            \"bucketName\": \"string\",\n            \"pageLabel\": \"string\",\n            \"versionId\": \"string\",\n        }\n    }\n]\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def similarity_search(\n    self,\n    *,\n    access_key: str,\n    secret_key: str,\n    collection_name: str,\n    query: str,\n    top_k: int,\n    search_parameters: Union[Any, Dict[str, Any]] = None,\n) -&gt; Union[Any, List[Dict[str, Any]]]:\n    \"\"\"\n    Perform a similarity search on a specified collection using the provided query.\n    This method interacts with the SimilaritySearchAPI to retrieve the most relevant\n    results from a collection based on the given query. The results are ranked by\n    similarity, and the top `k` results are returned.\n\n    Args:\n        query (str): The search query string used to find similar items in the collection.\n        collection_name (str): The name of the collection to search within.\n        top_k (int): The number of top similar results to retrieve.\n        access_key (str): The access key for authentication with the API.\n        secret_key (str): The secret key for authentication with the API.\n        search_parameters (Optional[Union[Any, Dict[str, Any]]]): Additional search parameters\n            that can be passed to the API for fine-tuning the search behavior.\n\n    Returns:\n        Union[Any, List[Dict[str, Any]]]: A list of dictionaries containing the top `k` similar results, or another data type depending on the API's response.\n\n    Example usage:\n        ```python\n        client = DIClient(session)\n        results = client.similarity_search(\n            query=\"machine learning\",\n            collection_name=\"research_papers\",\n            top_k=5,\n            access_key=\"your_access_key\",\n            secret_key=\"your_secret_key\",\n            search_parameters={\"metric\": \"cosine\", \"ef_search\": \"100\"}\n        )\n        print(results)\n        [\n            {\n                \"dataChunk\": \"chunk1\",\n                \"score\": 0.9,\n                \"chunkMetadata\": {\n                    \"objectKey\": \"value\",\n                    \"startCharIndex\": 1,\n                    \"endCharIndex\": 2,\n                    \"bucketName\": \"string\",\n                    \"pageLabel\": \"string\",\n                    \"versionId\": \"string\",\n                }\n            }\n        ]\n        ```\n    \"\"\"\n    return SimilaritySearchAPI(self.session).search(\n        query=query,\n        collection_name=collection_name,\n        top_k=top_k,\n        access_key=access_key,\n        secret_key=secret_key,\n        search_parameters=search_parameters,\n    )\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient","title":"<code>DIAdminClient</code>","text":"<p>               Bases: <code>DIClient</code></p> <p>DIAdminClient The <code>DIAdminClient</code> class is an extension of the <code>DIClient</code> class, designed specifically for administrative operations within the Data Intelligence (DI) platform. This class provides methods to manage collections, pipelines, schemas, and their associated resources. It is intended for use cases where administrative privileges are required to perform operations such as creating, deleting, or modifying collections, pipelines, and schemas.</p>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient--purpose","title":"Purpose:","text":"<p>The <code>DIAdminClient</code> is tailored for scenarios where administrative-level API interactions are necessary. It provides a higher level of control over the DI platform's resources, enabling administrators to configure and manage the system effectively.</p>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient--when-to-use","title":"When to Use:","text":"<ul> <li> <p>Use this class when you need to perform administrative tasks such as:</p> <ul> <li> <p>Creating or deleting collections.</p> </li> <li> <p>Assigning or unassigning buckets to/from collections.</p> </li> <li> <p>Creating or deleting pipelines.</p> </li> <li> <p>Creating or deleting schemas.</p> </li> </ul> </li> <li> <p>This class is specifically designed for admin APIs. For non-admin APIs, use the <code>DIClient</code> class instead.</p> </li> </ul>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient--initialization","title":"Initialization:","text":"<p>The <code>DIAdminClient</code> requires authentication credentials (username and password) to establish an authenticated session with the DI platform. Upon initialization, it creates an authenticated session that is used for all subsequent API calls.</p> Source code in <code>pydi_client/di_client.py</code> <pre><code>class DIAdminClient(DIClient):\n    \"\"\"\n    DIAdminClient\n    The `DIAdminClient` class is an extension of the `DIClient` class, designed specifically for administrative operations\n    within the Data Intelligence (DI) platform. This class provides methods to manage collections, pipelines, schemas,\n    and their associated resources. It is intended for use cases where administrative privileges are required to perform\n    operations such as creating, deleting, or modifying collections, pipelines, and schemas.\n\n    Purpose:\n    ---------\n    The `DIAdminClient` is tailored for scenarios where administrative-level API interactions are necessary.\n    It provides a higher level of control over the DI platform's resources, enabling administrators to configure\n    and manage the system effectively.\n\n    When to Use:\n    ------------\n    - Use this class when you need to perform administrative tasks such as:\n\n        - Creating or deleting collections.\n\n        - Assigning or unassigning buckets to/from collections.\n\n        - Creating or deleting pipelines.\n\n        - Creating or deleting schemas.\n\n    - This class is specifically designed for admin APIs. For non-admin APIs, use the `DIClient` class instead.\n\n    Initialization:\n    ---------------\n    The `DIAdminClient` requires authentication credentials (username and password) to establish an authenticated session\n    with the DI platform. Upon initialization, it creates an authenticated session that is used for all subsequent API calls.\n    --------\n    \"\"\"\n\n    def __init__(self, *, uri: str, username: str, password: str) -&gt; None:\n        super().__init__(uri=uri)\n\n        # create session with auth\n        self._authenticated_session = AuthAPI.login(\n            uri=uri, username=username, password=password\n        )\n\n    @property\n    def authenticated_session(self) -&gt; AuthenticatedSession:\n        \"\"\"\n        Property to get the authenticated session object.\n\n        Returns: \n        AuthenticatedSession: The authenticated session object used for making API requests.This session is initialized with the provided URI, username, password, and token.\n\n        \"\"\"\n        return self._authenticated_session\n\n    def create_collection(\n        self, *, name: str, pipeline: str, buckets: Optional[List[str]] = None\n    ) -&gt; V1CollectionResponse:\n        \"\"\"\n        Creates a new collection using the specified pipeline.\n        If buckets are provided, they will be associated with the collection and inline embedding generation will be triggered.\n        If buckets are not provided, the collection will be created but embedding generation will be deferred until buckets are assigned to the collection.\n\n        Args:\n            name (str): The name of the collection to be created. This should be unique.\n            pipeline (str): The name of the pipeline to be associated with the collection.\n            buckets (Optional[List[str]], optional): A list of bucket names. Defaults to None.\n\n        Returns:\n            V1CollectionResponse: The created collection object.\n\n        Example usage:\n            ```python\n            # Example usage of create_collection\n            client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n            collection = client.create_collection(\n                name=\"example_collection\",\n                pipeline=\"data_ingestion_pipeline\",\n                buckets=[\"bucket1\", \"bucket2\"]\n            )\n            print(collection)\n            # Sample Output:\n            # V1CollectionResponse(\n            #     name=\"example_collection\",\n            #     pipeline=\"data_ingestion_pipeline\",\n            #     buckets=[\"bucket1\", \"bucket2\"]\n            # )\n            ```\n        \"\"\"\n        if buckets is None:\n            buckets = []\n\n        return CollectionAPI(session=self.authenticated_session).create_collection(\n            name=name,\n            buckets=buckets,\n            pipeline=pipeline,\n        )\n\n    def delete_collection(self, *, name: str) -&gt; V1DeleteCollectionResponse:\n        \"\"\"\n        Deletes a collection by its name.\n\n        Args:\n            name (str): The name of the collection to be deleted.\n\n        Returns:\n            None: This method does not return any value.\n\n        Example Usage:\n        ```python\n            client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n            resp = client.delete_collection(name=\"example_collection\")\n            print(resp)\n            # Output:\n            # V1DeleteCollectionResponse(\n            #     success=True,\n            #     message=\"Collection 'example_collection' has been deleted.\"\n            # )\n        ```\n        \"\"\"\n        return CollectionAPI(session=self.authenticated_session).delete_collection(\n            name=name\n        )\n\n    def assign_buckets_to_collection(\n        self, *, collection_name: str, buckets: List[str]\n    ) -&gt; BucketUpdateResponse:\n        \"\"\"\n        Assigns a list of buckets to a specified collection.\n        This enables inline embedding generation for the specified buckets.\n\n        Args:\n            collection_name (str): The name of the collection to which the buckets\n                will be assigned.\n            buckets (List[str]): A list of bucket names to be assigned to the\n                specified collection.\n\n        Returns:\n            BucketUpdateResponse: The response object containing details about the\n            updated collection and assigned buckets.\n\n        Example Usage:\n            ```python\n            # Initialize the DIAdminClient\n            client = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n            # Define the collection name and buckets\n            collection_name = \"my_collection\"\n            buckets = [\"bucket1\", \"bucket2\", \"bucket3\"]\n            # Assign buckets to the collection\n            response = client.assign_buckets_to_collection(\n                collection_name=collection_name,\n                buckets=buckets\n            )\n            print(response)\n            # Output:\n            # BucketUpdateResponse(\n            #     sucess=true,\n            #     message=\"Buckets assigned successfully to collection 'my_collection'.\"\n            # )\n            ```\n        Notes:\n            - This method is typically used for enabling the user buckets for intelligence using an existing collection.\n        \"\"\"\n\n        return CollectionAPI(\n            session=self.authenticated_session\n        ).assign_buckets_to_collection(collection_name=collection_name, buckets=buckets)\n\n    def unassign_buckets_from_collection(\n        self, *, collection_name: str, buckets: List[str]\n    ) -&gt; BucketUpdateResponse:\n        \"\"\"\n        Unassigns one or more buckets from a specified collection.\n\n        Args:\n            collection_name (str): The name of the collection from which the buckets will be unassigned.\n            buckets (List[str]): A list of bucket names to be unassigned.\n\n        Returns:\n            BucketUpdateResponse: The response object containing details about the updated collection\n            after the buckets have been unassigned.\n\n        Example usage:\n            ```python\n            # Example usage of unassign_buckets_from_collection\n            client = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n\n            # Unassign multiple buckets\n            response = client.unassign_buckets_from_collection(\n                collection_name=\"example_collection\",\n                buckets=[\"bucket_1\", \"bucket_2\", \"bucket_3\"]\n            )\n            print(response)\n            # Output:\n            # BucketUpdateResponse(\n            #     success=true,\n            #     message=\"Buckets unassigned successfully from collection 'example_collection'.\"\n            # )\n            ```\n        \"\"\"\n        return CollectionAPI(\n            session=self.authenticated_session\n        ).unassign_buckets_from_collection(\n            collection_name=collection_name, buckets=buckets\n        )\n\n    def create_pipeline(\n        self,\n        *,\n        name: str,\n        pipeline_type: str,\n        event_filter_object_suffix: List[str],\n        event_filter_max_object_size: Optional[int] = None,\n        schema: Optional[str] = None,\n        model: Optional[str] = None,\n        custom_func: Optional[str] = None,\n    ) -&gt; V1CreatePipelineResponse:\n        \"\"\"\n        Creates a new pipeline with the specified configuration.\n\n        Args:\n            name (str): The name of the pipeline to be created.\n            pipeline_type (str): The type of the pipeline (e.g., \"rag\", \"metadata\").\n            model Optional (str): The model associated with the pipeline.\n            custom_func Optional (str): The custom function to be used in the pipeline.\n            event_filter_object_suffix (List[str]): A list of file suffixes to filter events. Ex - [\"*.txt\", \"*.pdf\"]\n            event_filter_max_object_size (int): The maximum object size for event filtering. Ex - 10485760\n            schema Optional (str): The schema definition for the pipeline.\n\n        Returns:\n            V1CreatePipelineResponse: The response object containing details of the created pipeline.\n\n        Example usage:\n            ```python\n            client = DIAdminClient(\n                uri=\"http://example.com\",\n                username=\"admin\",\n                password=\"password\"\n            )\n            pipeline_data = client.create_pipeline(\n                name=\"example_pipeline\",\n                pipeline_type=\"rag\",\n                model=\"example_model\",\n                custom_func=\"custom_processing_function\",\n                event_filter_object_suffix=[\"*.txt\", \"*.pdf\"],\n                event_filter_max_object_size=10485760,\n                schema=\"example_schema\"\n            )\n            print(pipeline_data)\n            # Output: V1CreatePipelineResponse(\n            #     success=true,\n            #     message=\"Pipeline 'example_pipeline' created successfully.\"\n            # )\n            ```\n        \"\"\"\n\n        return PipelineAPI(session=self.authenticated_session).create_pipeline(\n            name=name,\n            pipeline_type=pipeline_type,\n            model=model,\n            custom_func=custom_func,\n            event_filter_object_suffix=event_filter_object_suffix,\n            event_filter_max_object_size=event_filter_max_object_size,\n            schema=schema,\n        )\n\n    def delete_pipeline(self, *, name: str) -&gt; V1DeletePipelineResponse:\n        \"\"\"\n        Deletes a pipeline with the specified name.\n\n        Args:\n            name (str): The name of the pipeline to be deleted.\n\n        Returns:\n            V1DeletePipelineResponse: The response object containing details about the deleted pipeline.\n\n        Example usage:\n            ```python\n            # Initialize the DIAdminClient\n            client = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n\n            # Delete a pipeline by name\n            response = client.delete_pipeline(name=\"example_pipeline\")\n            print(response)\n            # Output:\n            # V1DeletePipelineResponse(\n            #     message=\"Pipeline successfully deleted\"\n            #     success=True,\n            # )\n            ```\n        \"\"\"\n        return PipelineAPI(session=self.authenticated_session).delete_pipeline(\n            name=name\n        )\n\n    def get_schema(self, *, name: str) -&gt; V1SchemasResponse:\n        \"\"\"\n        Retrieve a schema by its name.\n        This method fetches a schema object from the SchemaAPI using the provided name.\n\n        Args:\n            name (str): The name of the schema to retrieve. This is a required keyword-only argument.\n\n        Returns:\n            V1SchemaResponse: The response object containing details about the schema.\n\n        Example usage:\n            ```python\n                client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n                schema = client.get_schema(name=\"example_schema\")\n                print(schema)\n                # Output: V1SchemaResponse(\n                #     name=\"example_schema\",\n                #     type=\"...\",\n                #     schema=[SchemaItem]\n                # )\n        \"\"\"\n        return SchemaAPI(session=self.authenticated_session).get_schema(name=name)\n\n    def get_all_schemas(self) -&gt; V1ListSchemasResponse:\n        \"\"\"\n        Retrieves all schemas available in the system.\n\n        Returns:\n            V1ListSchemasResponse: A response object containing a list of\n            schemas available in the system.\n\n        Example usage:\n            ```python\n                client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n                schemas = client.get_all_schemas()\n                print(schemas)\n                # Output: V1ListSchemasResponse(\n                #     schemas=[SchemaRecordSummary]\n                # )\n            ```\n        \"\"\"\n        return SchemaAPI(session=self.authenticated_session).get_schemas()\n\n    def get_embedding_model(self, *, name: str) -&gt; V1ModelsResponse:\n        \"\"\"\n        Retrieve an embedding model by its name.\n        This method fetches an embedding model object from the EmbeddingModelAPI using the provided name.\n\n        Args:\n            name (str): The name of the embedding model to retrieve. This is a required keyword-only argument.\n\n        Returns:\n            V1ModelsResponse: The response object containing details about the embedding model.\n\n        Example usage:\n            ```python\n                client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n                model = client.get_embedding_model(name=\"example_model\")\n                print(model)\n                # Output: V1ModelsResponse(\n                #     name=\"example_model\",\n                #     modelName=\"...\",\n                #     capabilities=\"...\",\n                #     dimension=...,  # e.g., 768\n                #     maximumTokens=...,  # e.g., 512\n                #     version=\"...\"\n                # )\n            ```\n        \"\"\"\n        return EmbeddingModelAPI(self.authenticated_session).get_model(name=name)\n\n    def get_all_embedding_models(self) -&gt; V1ListModelsResponse:\n        \"\"\"\n        Retrieves all embedding models available in the system.\n\n        Returns:\n            V1ListModelsResponse: A response object containing a list of\n            embedding models available in the system.\n\n        Example usage:\n            ```python\n                client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n                models = client.get_all_embedding_models()\n                print(models[0])\n                # Output: V1ModelsResponse(\n                #     models=[ModelRecordSummary],\n                # )\n            ```\n        \"\"\"\n        return EmbeddingModelAPI(self.authenticated_session).get_models()\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.authenticated_session","title":"<code>authenticated_session</code>  <code>property</code>","text":"<p>Property to get the authenticated session object.</p> <p>Returns:  AuthenticatedSession: The authenticated session object used for making API requests.This session is initialized with the provided URI, username, password, and token.</p>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.create_collection","title":"<code>create_collection(*, name, pipeline, buckets=None)</code>","text":"<p>Creates a new collection using the specified pipeline. If buckets are provided, they will be associated with the collection and inline embedding generation will be triggered. If buckets are not provided, the collection will be created but embedding generation will be deferred until buckets are assigned to the collection.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the collection to be created. This should be unique.</p> required <code>pipeline</code> <code>str</code> <p>The name of the pipeline to be associated with the collection.</p> required <code>buckets</code> <code>Optional[List[str]]</code> <p>A list of bucket names. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>V1CollectionResponse</code> <code>V1CollectionResponse</code> <p>The created collection object.</p> Example usage <pre><code># Example usage of create_collection\nclient = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\ncollection = client.create_collection(\n    name=\"example_collection\",\n    pipeline=\"data_ingestion_pipeline\",\n    buckets=[\"bucket1\", \"bucket2\"]\n)\nprint(collection)\n# Sample Output:\n# V1CollectionResponse(\n#     name=\"example_collection\",\n#     pipeline=\"data_ingestion_pipeline\",\n#     buckets=[\"bucket1\", \"bucket2\"]\n# )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def create_collection(\n    self, *, name: str, pipeline: str, buckets: Optional[List[str]] = None\n) -&gt; V1CollectionResponse:\n    \"\"\"\n    Creates a new collection using the specified pipeline.\n    If buckets are provided, they will be associated with the collection and inline embedding generation will be triggered.\n    If buckets are not provided, the collection will be created but embedding generation will be deferred until buckets are assigned to the collection.\n\n    Args:\n        name (str): The name of the collection to be created. This should be unique.\n        pipeline (str): The name of the pipeline to be associated with the collection.\n        buckets (Optional[List[str]], optional): A list of bucket names. Defaults to None.\n\n    Returns:\n        V1CollectionResponse: The created collection object.\n\n    Example usage:\n        ```python\n        # Example usage of create_collection\n        client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n        collection = client.create_collection(\n            name=\"example_collection\",\n            pipeline=\"data_ingestion_pipeline\",\n            buckets=[\"bucket1\", \"bucket2\"]\n        )\n        print(collection)\n        # Sample Output:\n        # V1CollectionResponse(\n        #     name=\"example_collection\",\n        #     pipeline=\"data_ingestion_pipeline\",\n        #     buckets=[\"bucket1\", \"bucket2\"]\n        # )\n        ```\n    \"\"\"\n    if buckets is None:\n        buckets = []\n\n    return CollectionAPI(session=self.authenticated_session).create_collection(\n        name=name,\n        buckets=buckets,\n        pipeline=pipeline,\n    )\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.delete_collection","title":"<code>delete_collection(*, name)</code>","text":"<p>Deletes a collection by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the collection to be deleted.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>V1DeleteCollectionResponse</code> <p>This method does not return any value.</p> <p>Example Usage:</p> <pre><code>    client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n    resp = client.delete_collection(name=\"example_collection\")\n    print(resp)\n    # Output:\n    # V1DeleteCollectionResponse(\n    #     success=True,\n    #     message=\"Collection 'example_collection' has been deleted.\"\n    # )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def delete_collection(self, *, name: str) -&gt; V1DeleteCollectionResponse:\n    \"\"\"\n    Deletes a collection by its name.\n\n    Args:\n        name (str): The name of the collection to be deleted.\n\n    Returns:\n        None: This method does not return any value.\n\n    Example Usage:\n    ```python\n        client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n        resp = client.delete_collection(name=\"example_collection\")\n        print(resp)\n        # Output:\n        # V1DeleteCollectionResponse(\n        #     success=True,\n        #     message=\"Collection 'example_collection' has been deleted.\"\n        # )\n    ```\n    \"\"\"\n    return CollectionAPI(session=self.authenticated_session).delete_collection(\n        name=name\n    )\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.assign_buckets_to_collection","title":"<code>assign_buckets_to_collection(*, collection_name, buckets)</code>","text":"<p>Assigns a list of buckets to a specified collection. This enables inline embedding generation for the specified buckets.</p> <p>Parameters:</p> Name Type Description Default <code>collection_name</code> <code>str</code> <p>The name of the collection to which the buckets will be assigned.</p> required <code>buckets</code> <code>List[str]</code> <p>A list of bucket names to be assigned to the specified collection.</p> required <p>Returns:</p> Name Type Description <code>BucketUpdateResponse</code> <code>BucketUpdateResponse</code> <p>The response object containing details about the</p> <code>BucketUpdateResponse</code> <p>updated collection and assigned buckets.</p> Example Usage <pre><code># Initialize the DIAdminClient\nclient = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n# Define the collection name and buckets\ncollection_name = \"my_collection\"\nbuckets = [\"bucket1\", \"bucket2\", \"bucket3\"]\n# Assign buckets to the collection\nresponse = client.assign_buckets_to_collection(\n    collection_name=collection_name,\n    buckets=buckets\n)\nprint(response)\n# Output:\n# BucketUpdateResponse(\n#     sucess=true,\n#     message=\"Buckets assigned successfully to collection 'my_collection'.\"\n# )\n</code></pre> <p>Notes:     - This method is typically used for enabling the user buckets for intelligence using an existing collection.</p> Source code in <code>pydi_client/di_client.py</code> <pre><code>def assign_buckets_to_collection(\n    self, *, collection_name: str, buckets: List[str]\n) -&gt; BucketUpdateResponse:\n    \"\"\"\n    Assigns a list of buckets to a specified collection.\n    This enables inline embedding generation for the specified buckets.\n\n    Args:\n        collection_name (str): The name of the collection to which the buckets\n            will be assigned.\n        buckets (List[str]): A list of bucket names to be assigned to the\n            specified collection.\n\n    Returns:\n        BucketUpdateResponse: The response object containing details about the\n        updated collection and assigned buckets.\n\n    Example Usage:\n        ```python\n        # Initialize the DIAdminClient\n        client = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n        # Define the collection name and buckets\n        collection_name = \"my_collection\"\n        buckets = [\"bucket1\", \"bucket2\", \"bucket3\"]\n        # Assign buckets to the collection\n        response = client.assign_buckets_to_collection(\n            collection_name=collection_name,\n            buckets=buckets\n        )\n        print(response)\n        # Output:\n        # BucketUpdateResponse(\n        #     sucess=true,\n        #     message=\"Buckets assigned successfully to collection 'my_collection'.\"\n        # )\n        ```\n    Notes:\n        - This method is typically used for enabling the user buckets for intelligence using an existing collection.\n    \"\"\"\n\n    return CollectionAPI(\n        session=self.authenticated_session\n    ).assign_buckets_to_collection(collection_name=collection_name, buckets=buckets)\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.unassign_buckets_from_collection","title":"<code>unassign_buckets_from_collection(*, collection_name, buckets)</code>","text":"<p>Unassigns one or more buckets from a specified collection.</p> <p>Parameters:</p> Name Type Description Default <code>collection_name</code> <code>str</code> <p>The name of the collection from which the buckets will be unassigned.</p> required <code>buckets</code> <code>List[str]</code> <p>A list of bucket names to be unassigned.</p> required <p>Returns:</p> Name Type Description <code>BucketUpdateResponse</code> <code>BucketUpdateResponse</code> <p>The response object containing details about the updated collection</p> <code>BucketUpdateResponse</code> <p>after the buckets have been unassigned.</p> Example usage <pre><code># Example usage of unassign_buckets_from_collection\nclient = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n\n# Unassign multiple buckets\nresponse = client.unassign_buckets_from_collection(\n    collection_name=\"example_collection\",\n    buckets=[\"bucket_1\", \"bucket_2\", \"bucket_3\"]\n)\nprint(response)\n# Output:\n# BucketUpdateResponse(\n#     success=true,\n#     message=\"Buckets unassigned successfully from collection 'example_collection'.\"\n# )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def unassign_buckets_from_collection(\n    self, *, collection_name: str, buckets: List[str]\n) -&gt; BucketUpdateResponse:\n    \"\"\"\n    Unassigns one or more buckets from a specified collection.\n\n    Args:\n        collection_name (str): The name of the collection from which the buckets will be unassigned.\n        buckets (List[str]): A list of bucket names to be unassigned.\n\n    Returns:\n        BucketUpdateResponse: The response object containing details about the updated collection\n        after the buckets have been unassigned.\n\n    Example usage:\n        ```python\n        # Example usage of unassign_buckets_from_collection\n        client = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n\n        # Unassign multiple buckets\n        response = client.unassign_buckets_from_collection(\n            collection_name=\"example_collection\",\n            buckets=[\"bucket_1\", \"bucket_2\", \"bucket_3\"]\n        )\n        print(response)\n        # Output:\n        # BucketUpdateResponse(\n        #     success=true,\n        #     message=\"Buckets unassigned successfully from collection 'example_collection'.\"\n        # )\n        ```\n    \"\"\"\n    return CollectionAPI(\n        session=self.authenticated_session\n    ).unassign_buckets_from_collection(\n        collection_name=collection_name, buckets=buckets\n    )\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.create_pipeline","title":"<code>create_pipeline(*, name, pipeline_type, event_filter_object_suffix, event_filter_max_object_size=None, schema=None, model=None, custom_func=None)</code>","text":"<p>Creates a new pipeline with the specified configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the pipeline to be created.</p> required <code>pipeline_type</code> <code>str</code> <p>The type of the pipeline (e.g., \"rag\", \"metadata\").</p> required <code>model</code> <code>Optional (str</code> <p>The model associated with the pipeline.</p> <code>None</code> <code>custom_func</code> <code>Optional (str</code> <p>The custom function to be used in the pipeline.</p> <code>None</code> <code>event_filter_object_suffix</code> <code>List[str]</code> <p>A list of file suffixes to filter events. Ex - [\".txt\", \".pdf\"]</p> required <code>event_filter_max_object_size</code> <code>int</code> <p>The maximum object size for event filtering. Ex - 10485760</p> <code>None</code> <code>schema</code> <code>Optional (str</code> <p>The schema definition for the pipeline.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>V1CreatePipelineResponse</code> <code>V1CreatePipelineResponse</code> <p>The response object containing details of the created pipeline.</p> Example usage <pre><code>client = DIAdminClient(\n    uri=\"http://example.com\",\n    username=\"admin\",\n    password=\"password\"\n)\npipeline_data = client.create_pipeline(\n    name=\"example_pipeline\",\n    pipeline_type=\"rag\",\n    model=\"example_model\",\n    custom_func=\"custom_processing_function\",\n    event_filter_object_suffix=[\"*.txt\", \"*.pdf\"],\n    event_filter_max_object_size=10485760,\n    schema=\"example_schema\"\n)\nprint(pipeline_data)\n# Output: V1CreatePipelineResponse(\n#     success=true,\n#     message=\"Pipeline 'example_pipeline' created successfully.\"\n# )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def create_pipeline(\n    self,\n    *,\n    name: str,\n    pipeline_type: str,\n    event_filter_object_suffix: List[str],\n    event_filter_max_object_size: Optional[int] = None,\n    schema: Optional[str] = None,\n    model: Optional[str] = None,\n    custom_func: Optional[str] = None,\n) -&gt; V1CreatePipelineResponse:\n    \"\"\"\n    Creates a new pipeline with the specified configuration.\n\n    Args:\n        name (str): The name of the pipeline to be created.\n        pipeline_type (str): The type of the pipeline (e.g., \"rag\", \"metadata\").\n        model Optional (str): The model associated with the pipeline.\n        custom_func Optional (str): The custom function to be used in the pipeline.\n        event_filter_object_suffix (List[str]): A list of file suffixes to filter events. Ex - [\"*.txt\", \"*.pdf\"]\n        event_filter_max_object_size (int): The maximum object size for event filtering. Ex - 10485760\n        schema Optional (str): The schema definition for the pipeline.\n\n    Returns:\n        V1CreatePipelineResponse: The response object containing details of the created pipeline.\n\n    Example usage:\n        ```python\n        client = DIAdminClient(\n            uri=\"http://example.com\",\n            username=\"admin\",\n            password=\"password\"\n        )\n        pipeline_data = client.create_pipeline(\n            name=\"example_pipeline\",\n            pipeline_type=\"rag\",\n            model=\"example_model\",\n            custom_func=\"custom_processing_function\",\n            event_filter_object_suffix=[\"*.txt\", \"*.pdf\"],\n            event_filter_max_object_size=10485760,\n            schema=\"example_schema\"\n        )\n        print(pipeline_data)\n        # Output: V1CreatePipelineResponse(\n        #     success=true,\n        #     message=\"Pipeline 'example_pipeline' created successfully.\"\n        # )\n        ```\n    \"\"\"\n\n    return PipelineAPI(session=self.authenticated_session).create_pipeline(\n        name=name,\n        pipeline_type=pipeline_type,\n        model=model,\n        custom_func=custom_func,\n        event_filter_object_suffix=event_filter_object_suffix,\n        event_filter_max_object_size=event_filter_max_object_size,\n        schema=schema,\n    )\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.delete_pipeline","title":"<code>delete_pipeline(*, name)</code>","text":"<p>Deletes a pipeline with the specified name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the pipeline to be deleted.</p> required <p>Returns:</p> Name Type Description <code>V1DeletePipelineResponse</code> <code>V1DeletePipelineResponse</code> <p>The response object containing details about the deleted pipeline.</p> Example usage <pre><code># Initialize the DIAdminClient\nclient = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n\n# Delete a pipeline by name\nresponse = client.delete_pipeline(name=\"example_pipeline\")\nprint(response)\n# Output:\n# V1DeletePipelineResponse(\n#     message=\"Pipeline successfully deleted\"\n#     success=True,\n# )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def delete_pipeline(self, *, name: str) -&gt; V1DeletePipelineResponse:\n    \"\"\"\n    Deletes a pipeline with the specified name.\n\n    Args:\n        name (str): The name of the pipeline to be deleted.\n\n    Returns:\n        V1DeletePipelineResponse: The response object containing details about the deleted pipeline.\n\n    Example usage:\n        ```python\n        # Initialize the DIAdminClient\n        client = DIAdminClient(uri=\"http://example.com\", username=\"admin\", password=\"password\")\n\n        # Delete a pipeline by name\n        response = client.delete_pipeline(name=\"example_pipeline\")\n        print(response)\n        # Output:\n        # V1DeletePipelineResponse(\n        #     message=\"Pipeline successfully deleted\"\n        #     success=True,\n        # )\n        ```\n    \"\"\"\n    return PipelineAPI(session=self.authenticated_session).delete_pipeline(\n        name=name\n    )\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.get_schema","title":"<code>get_schema(*, name)</code>","text":"<p>Retrieve a schema by its name. This method fetches a schema object from the SchemaAPI using the provided name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the schema to retrieve. This is a required keyword-only argument.</p> required <p>Returns:</p> Name Type Description <code>V1SchemaResponse</code> <code>V1SchemasResponse</code> <p>The response object containing details about the schema.</p> Example usage <p>```python     client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")     schema = client.get_schema(name=\"example_schema\")     print(schema)     # Output: V1SchemaResponse(     #     name=\"example_schema\",     #     type=\"...\",     #     schema=[SchemaItem]     # )</p> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_schema(self, *, name: str) -&gt; V1SchemasResponse:\n    \"\"\"\n    Retrieve a schema by its name.\n    This method fetches a schema object from the SchemaAPI using the provided name.\n\n    Args:\n        name (str): The name of the schema to retrieve. This is a required keyword-only argument.\n\n    Returns:\n        V1SchemaResponse: The response object containing details about the schema.\n\n    Example usage:\n        ```python\n            client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n            schema = client.get_schema(name=\"example_schema\")\n            print(schema)\n            # Output: V1SchemaResponse(\n            #     name=\"example_schema\",\n            #     type=\"...\",\n            #     schema=[SchemaItem]\n            # )\n    \"\"\"\n    return SchemaAPI(session=self.authenticated_session).get_schema(name=name)\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.get_all_schemas","title":"<code>get_all_schemas()</code>","text":"<p>Retrieves all schemas available in the system.</p> <p>Returns:</p> Name Type Description <code>V1ListSchemasResponse</code> <code>V1ListSchemasResponse</code> <p>A response object containing a list of</p> <code>V1ListSchemasResponse</code> <p>schemas available in the system.</p> Example usage <pre><code>    client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n    schemas = client.get_all_schemas()\n    print(schemas)\n    # Output: V1ListSchemasResponse(\n    #     schemas=[SchemaRecordSummary]\n    # )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_all_schemas(self) -&gt; V1ListSchemasResponse:\n    \"\"\"\n    Retrieves all schemas available in the system.\n\n    Returns:\n        V1ListSchemasResponse: A response object containing a list of\n        schemas available in the system.\n\n    Example usage:\n        ```python\n            client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n            schemas = client.get_all_schemas()\n            print(schemas)\n            # Output: V1ListSchemasResponse(\n            #     schemas=[SchemaRecordSummary]\n            # )\n        ```\n    \"\"\"\n    return SchemaAPI(session=self.authenticated_session).get_schemas()\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.get_embedding_model","title":"<code>get_embedding_model(*, name)</code>","text":"<p>Retrieve an embedding model by its name. This method fetches an embedding model object from the EmbeddingModelAPI using the provided name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the embedding model to retrieve. This is a required keyword-only argument.</p> required <p>Returns:</p> Name Type Description <code>V1ModelsResponse</code> <code>V1ModelsResponse</code> <p>The response object containing details about the embedding model.</p> Example usage <pre><code>    client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n    model = client.get_embedding_model(name=\"example_model\")\n    print(model)\n    # Output: V1ModelsResponse(\n    #     name=\"example_model\",\n    #     modelName=\"...\",\n    #     capabilities=\"...\",\n    #     dimension=...,  # e.g., 768\n    #     maximumTokens=...,  # e.g., 512\n    #     version=\"...\"\n    # )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_embedding_model(self, *, name: str) -&gt; V1ModelsResponse:\n    \"\"\"\n    Retrieve an embedding model by its name.\n    This method fetches an embedding model object from the EmbeddingModelAPI using the provided name.\n\n    Args:\n        name (str): The name of the embedding model to retrieve. This is a required keyword-only argument.\n\n    Returns:\n        V1ModelsResponse: The response object containing details about the embedding model.\n\n    Example usage:\n        ```python\n            client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n            model = client.get_embedding_model(name=\"example_model\")\n            print(model)\n            # Output: V1ModelsResponse(\n            #     name=\"example_model\",\n            #     modelName=\"...\",\n            #     capabilities=\"...\",\n            #     dimension=...,  # e.g., 768\n            #     maximumTokens=...,  # e.g., 512\n            #     version=\"...\"\n            # )\n        ```\n    \"\"\"\n    return EmbeddingModelAPI(self.authenticated_session).get_model(name=name)\n</code></pre>"},{"location":"api/reference/#pydi_client.di_client.DIAdminClient.get_all_embedding_models","title":"<code>get_all_embedding_models()</code>","text":"<p>Retrieves all embedding models available in the system.</p> <p>Returns:</p> Name Type Description <code>V1ListModelsResponse</code> <code>V1ListModelsResponse</code> <p>A response object containing a list of</p> <code>V1ListModelsResponse</code> <p>embedding models available in the system.</p> Example usage <pre><code>    client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n    models = client.get_all_embedding_models()\n    print(models[0])\n    # Output: V1ModelsResponse(\n    #     models=[ModelRecordSummary],\n    # )\n</code></pre> Source code in <code>pydi_client/di_client.py</code> <pre><code>def get_all_embedding_models(self) -&gt; V1ListModelsResponse:\n    \"\"\"\n    Retrieves all embedding models available in the system.\n\n    Returns:\n        V1ListModelsResponse: A response object containing a list of\n        embedding models available in the system.\n\n    Example usage:\n        ```python\n            client = DIAdminClient(uri=\"https://example.com\", username=\"admin\", password=\"password\")\n            models = client.get_all_embedding_models()\n            print(models[0])\n            # Output: V1ModelsResponse(\n            #     models=[ModelRecordSummary],\n            # )\n        ```\n    \"\"\"\n    return EmbeddingModelAPI(self.authenticated_session).get_models()\n</code></pre>"}]}